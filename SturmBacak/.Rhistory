b = x
}
if ((a[2]<b[2]) & ((a[1]-a[2])<=(b[1]-b[2]))){
t = (b[2]-a[2])/(b[1]-a[1])
if (tk <= t) {
mu = c(a[1]+tk*(b[1]-a[1]), a[2]+tk*(b[1]-a[1]))
}
if (t < tk) {
mu = c(a[1]+tk*(b[1]-a[1]), b[2])
}
}
if ((a[2]<b[2]) & ((a[1]-a[2])>(b[1]-b[2]))){
t = (b[1]-a[1])/(b[2]-a[2])
if (t >= tk) {
mu = c(a[1]+tk*(b[2]-a[2]), a[2]+tk*(b[2]-a[2]))
}
if (t < tk) {
mu = c(b[1],a[2]+tk*(b[2]-a[2]))
}
}
if (a[2]>b[2]){
t = (a[2]-b[2])/(a[2]-b[2]+b[1]-a[1])
if (t >= tk) {
mu = c(a[1],a[2]-tk*(a[2]-b[2]+b[1]-a[1]))
}
if (t < tk) {
mu = c(a[1]+b[2]-a[2]+tk*(a[2]-b[2]+b[1]-a[1]),b[2])
}
}
return (mu)
}
FrechetBacak<- function (P, K, N, epsilon){
mu = P[,sample(ncol(P),size=1)]
d = c()
for (k in 2:K){
p = P[,sample(ncol(P),size=1)]
muk=mu
lamb = lambda(k)
ww = w(k)
mu = bacak_sequence(muk, p, k, lamb, ww)
d = c(d, de(muk, mu))
ld = length(d)
if (ld>N){
if (all(d[c((ld-N):ld )]<epsilon) ) {
#return (c(mu,1, k, sosd(dtr, mu, P)))
return (c(mu, sosd(dtr, mu, P)))
}
}
}
crit = 0
return (d)
#return (c(muk,crit))
}
FrechetBacak (P, K, N, epsilon)
FrechetBacak<- function (P, K, N, epsilon){
mu = P[,sample(ncol(P),size=1)]
d = c()
for (k in 2:K){
p = P[,sample(ncol(P),size=1)]
muk=mu
lamb = lambda(k)
ww = w(k)
mu = bacak_sequence(muk, p,  lamb, ww)
d = c(d, de(muk, mu))
ld = length(d)
if (ld>N){
if (all(d[c((ld-N):ld )]<epsilon) ) {
#return (c(mu,1, k, sosd(dtr, mu, P)))
return (c(mu, sosd(dtr, mu, P)))
}
}
}
crit = 0
return (d)
#return (c(muk,crit))
}
FrechetBacak (P, K, N, epsilon)
FrechetBacak<- function (P, K, N, epsilon){
mu = P[,sample(ncol(P),size=1)]
d = c()
for (k in 2:K){
p = P[,sample(ncol(P),size=1)]
muk=mu
lamb = lambda(k)
ww = w(k)
mu = bacak_sequence(x = muk, y = p,  lambda= lamb,w = ww)
d = c(d, de(muk, mu))
ld = length(d)
if (ld>N){
if (all(d[c((ld-N):ld )]<epsilon) ) {
#return (c(mu,1, k, sosd(dtr, mu, P)))
return (c(mu, sosd(dtr, mu, P)))
}
}
}
crit = 0
return (d)
#return (c(muk,crit))
}
FrechetBacak (P, K, N, epsilon)
bacak_sequence <- function (x,y, lambda, w) {
if (identical(x,y)) {
return (x)
break
}
tk = (2*lambda*w)/(1+2*lambda*w)
if ((x[1] == y[1]) | (x[2] == y[2])) {
return ((1-tk)*x+y*tk)
break
}
if ((x[1] == x[2]) & (y[1] == y[2])){
return ((1-tk)*x+y*tk)
break
}
if (x[1]<y[1]) {
a = x
b = y
}
if (x[1]>y[1]) {
a = y
b = x
}
if ((a[2]<b[2]) & ((a[1]-a[2])<=(b[1]-b[2]))){
t = (b[2]-a[2])/(b[1]-a[1])
if (tk <= t) {
mu = c(a[1]+tk*(b[1]-a[1]), a[2]+tk*(b[1]-a[1]))
}
if (t < tk) {
mu = c(a[1]+tk*(b[1]-a[1]), b[2])
}
}
if ((a[2]<b[2]) & ((a[1]-a[2])>(b[1]-b[2]))){
t = (b[1]-a[1])/(b[2]-a[2])
if (t >= tk) {
mu = c(a[1]+tk*(b[2]-a[2]), a[2]+tk*(b[2]-a[2]))
}
if (t < tk) {
mu = c(b[1],a[2]+tk*(b[2]-a[2]))
}
}
if (a[2]>b[2]){
t = (a[2]-b[2])/(a[2]-b[2]+b[1]-a[1])
if (t >= tk) {
mu = c(a[1],a[2]-tk*(a[2]-b[2]+b[1]-a[1]))
}
if (t < tk) {
mu = c(a[1]+b[2]-a[2]+tk*(a[2]-b[2]+b[1]-a[1]),b[2])
}
}
return (mu)
}
FrechetBacak<- function (P, K, N, epsilon){
mu = P[,sample(ncol(P),size=1)]
d = c()
for (k in 2:K){
p = P[,sample(ncol(P),size=1)]
muk=mu
lamb = lambda(k)
ww = w(k)
mu = bacak_sequence(muk,  p,  lamb,ww)
d = c(d, de(muk, mu))
ld = length(d)
if (ld>N){
if (all(d[c((ld-N):ld )]<epsilon) ) {
#return (c(mu,1, k, sosd(dtr, mu, P)))
return (c(mu, sosd(dtr, mu, P)))
}
}
}
crit = 0
return (d)
#return (c(muk,crit))
}
FrechetBacak (P, K, N, epsilon)
FrechetBacak (P, K, N, epsilon)
FrechetBacak<- function (P, K, N, epsilon){
mu = P[,sample(ncol(P),size=1)]
d = c()
for (k in 2:K){
p = P[,sample(ncol(P),size=1)]
muk=mu
lamb = lambda(k)
ww = w(k)
mu = bacak_sequence(muk,  p,  lamb,ww)
d = c(d, de(muk, mu))
ld = length(d)
if (ld>N){
if (all(d[c((ld-N):ld )]<epsilon) ) {
#return (c(mu,1, k, sosd(dtr, mu, P)))
return (c(mu, sosd(dtr, mu, P)))
}
}
}
crit = 0
return (mu, crit)
#return (c(muk,crit))
}
FrechetBacak (P, K, N, epsilon)
FrechetBacak<- function (P, K, N, epsilon){
mu = P[,sample(ncol(P),size=1)]
d = c()
for (k in 2:K){
p = P[,sample(ncol(P),size=1)]
muk=mu
lamb = lambda(k)
ww = w(k)
mu = bacak_sequence(muk,  p,  lamb,ww)
d = c(d, de(muk, mu))
ld = length(d)
if (ld>N){
if (all(d[c((ld-N):ld )]<epsilon) ) {
#return (c(mu,1, k, sosd(dtr, mu, P)))
return (c(mu, sosd(dtr, mu, P)))
}
}
}
crit = 0
return (c(mu, crit))
#return (c(muk,crit))
}
FrechetBacak (P, K, N, epsilon)
K = 1000000
N = 10
epsilon = 0.0001
FrechetBacak (P, K, N, epsilon)
K = 1000000
N = 100
epsilon = 0.0001
FrechetBacak (P, K, N, epsilon)
points(2,1, col='green', pch = 16)
plot(c(0, 3, 5),c(4, 0, 6), pch = 16)
lines(c(0,0), c(4,0))
lines(c(0,3), c(0,0))
lines(c(3,5), c(0,2))
lines(c(5,5), c(2,6))
lines(c(3,5), c(6,6))
points(3,4, col='green', pch = 16)
lines(c(3,0) ,c(6,4))
a = c(0,0)
b = c(448,449)
c = c(452,256)
a = c(0,0)
b = c(448,449)
c = c(452,256)
P<- matrix(c(a,b,c),nrow=length(a))
dtr <- function (x, y){
x = c(0,x)
y = c(0,y)
return (max(x-y) - min(x-y))
}
sosd <- function (d, mu, P) {
sos = 0
for (i in 1:ncol(P)){
x = P[,i]
sos = sos + d(x,mu)^2
}
return (sos)
}
s <- seq(0,4, by = 0.01)
ls = length(s)
ssq <- matrix(NA, ls, ls)
s <- seq(0,500, by = 0.1)
ls = length(s)
ssq <- matrix(NA, ls, ls)
ssq <- matrix(NA, ls, ls)
for (i in 1:ls){
for (j in 1:ls){
mu = c(s[i],s[j])
ssq[i,j] = sosd (dtr, mu, P)
}
}
min(ssq)
s <- seq(0,450, by = 1)
ls = length(s)
ssq <- matrix(NA, ls, ls)
for (i in 1:ls){
for (j in 1:ls){
mu = c(s[i],s[j])
ssq[i,j] = sod (dtr, mu, P)
}
}
min(ssq)
s <- seq(0,450, by = 1)
ls = length(s)
ssq <- matrix(NA, ls, ls)
ssq <- matrix(NA, ls, ls)
for (i in 1:ls){
for (j in 1:ls){
mu = c(s[i],s[j])
ssq[i,j] = sosd (dtr, mu, P)
}
}
min(ssq)
plot(c(0, 448, 452), c(0, 449, 256), pch = 16)
lines(c(452, 448), c(256, 256))
lines(c(448, 448), c(256, 449))
lines(c(449, 448), c(449, 449))
lines(c(0, 449), c(0, 449))
lines(c(256, 452), c(256, 256))
mins <- which(ssq == min(ssq), arr.ind = T)
plot(s[mins[,1]], s[mins[,2]], type='p',pch=16, ylim=c(-3,7), xlim= c(-3,7), col = 'green')
plot(c(0, 448, 452), c(0, 449, 256), pch = 16)
lines(c(452, 448), c(256, 256))
lines(c(448, 448), c(256, 449))
lines(c(449, 448), c(449, 449))
lines(c(0, 449), c(0, 449))
lines(c(256, 452), c(256, 256))
points(s[mins[,1]], s[mins[,2]], type='p',pch=16,  col = 'green')
s[mins[,2]]
s[mins[,1]]
a = c(0,0)
b = c(448,449)
c = c(452,256)
P<- matrix(c(a,b, c),nrow=length(a))
K = 1000000
N = 10
epsilon = 0.0001
dtr <- function (x, y){
x = c(0,x)
y = c(0,y)
return (max(x-y) - min(x-y))
}
de <- function (x, y) return (sqrt(sum((x-y)^2)))
sosd <- function (d, mu, P) {
sos = 0
for (i in 1:ncol(P)){
x = P[,i]
sos = sos + d(x,mu)^2
}
return (sos)
}
inductive_mean <- function (x,y,k) {
if (identical(x,y)) {
return (x)
break
}
if ((x[1] == y[1]) | (x[2] == y[2])) {
return ((1-1/k)*x+y/k)
break
}
if ((x[1] == x[2]) & (y[1] == y[2])){
return ((1-1/k)*x+y/k)
break
}
if (x[1]<y[1]) {
a = x
b = y
}
if (x[1]>y[1]) {
a = y
b = x
}
if ((a[2]<b[2]) & ((a[1]-a[2])<=(b[1]-b[2]))){
t = (b[2]-a[2])/(b[1]-a[1])
if ((1/k) <= t) {
mu = c(a[1]+(1/k)*(b[1]-a[1]), a[2]+(1/k)*(b[1]-a[1]))
}
if (t < (1/k)) {
mu = c(a[1]+(1/k)*(b[1]-a[1]), b[2])
}
}
if ((a[2]<b[2]) & ((a[1]-a[2])>(b[1]-b[2]))){
t = (b[1]-a[1])/(b[2]-a[2])
if (t >= (1/k)) {
mu = c(a[1]+(1/k)*(b[2]-a[2]), a[2]+(1/k)*(b[2]-a[2]))
}
if (t < (1/k)) {
mu = c(b[1],a[2]+(1/k)*(b[2]-a[2]))
}
}
if (a[2]>b[2]){
t = (a[2]-b[2])/(a[2]-b[2]+b[1]-a[1])
if (t >= (1/k)) {
mu = c(a[1],a[2]-(1/k)*(a[2]-b[2]+b[1]-a[1]))
}
if (t < (1/k)) {
mu = c(a[1]+b[2]-a[2]+(1/k)*(a[2]-b[2]+b[1]-a[1]),b[2])
}
}
return (mu)
}
FrechetStrum <- function (P, K, N, epsilon){
mu = P[,sample(ncol(P),size=1)]
d = c()
for (k in 1:K){
p = P[,sample(ncol(P),size=1)]
muk=mu
mu = inductive_mean(muk, p, k+1)
d = c(d, de(muk, mu))
ld = length(d)
if (ld>N){
if (all(d[c((ld-N):ld )]<epsilon) ) {
return (c(mu, sosd(dtr, mu, P)))
}
}
}
crit = 0
return (c(mu,crit))
}
FrechetStrum(P, K, N, epsilon)
FrechetStrum <- function (P, K, N, epsilon){
mu = P[,sample(ncol(P),size=1)]
d = c()
for (k in 1:K){
print(k)
p = P[,sample(ncol(P),size=1)]
muk=mu
mu = inductive_mean(muk, p, k+1)
d = c(d, de(muk, mu))
ld = length(d)
if (ld>N){
if (all(d[c((ld-N):ld )]<epsilon) ) {
return (c(mu, sosd(dtr, mu, P)))
}
}
}
crit = 0
return (c(mu,crit))
}
FrechetStrum(P, K, N, epsilon)
K = 20000
N = 100
epsilon = 0.0001
a = c(0,0)
b = c(2,4)
c = c(5,1)
P<- matrix(c(a,b, c),nrow=length(a))
FrechetStrum <- function (P, K, N, epsilon){
mu = P[,sample(ncol(P),size=1)]
d = c()
for (k in 1:K){
p = P[,sample(ncol(P),size=1)]
muk=mu
mu = inductive_mean(muk, p, k+1)
d = c(d, de(muk, mu))
ld = length(d)
if (ld>N){
if (all(d[c((ld-N):ld )]<epsilon) ) {
return (c(mu, sosd(dtr, mu, P)))
}
}
}
crit = 0
return (c(mu,crit))
}
FrechetStrum(P, K, N, epsilon)
FrechetStrum <- function (P, K, N, epsilon){
mu = P[,sample(ncol(P),size=1)]
d = c()
for (k in 1:K){
p = P[,sample(ncol(P),size=1)]
muk=mu
mu = inductive_mean(muk, p, k+1)
d = c(d, de(muk, mu))
ld = length(d)
if (ld>N){
if (all(d[c((ld-N):ld )]<epsilon) ) {
return (c(mu, sosd(dtr, mu, P)))
}
}
}
crit = 0
return (c("out for iterations:", mu))
}
FrechetStrum(P, K, N, epsilon)
K = 10000
N = 100
epsilon = 0.001
FrechetStrum(P, K, N, epsilon)
K = 1000000
N = 100
epsilon = 0.0001
FrechetStrum(P, K, N, epsilon)
points(c(0, 2),c(0, 4), pch = 16)
lines (c(2,2), c(2,4))
plot(c(0, 2),c(0, 4), pch = 16)
lines (c(2,2), c(2,4))
lines(c(0,2), c(0,2))
plot(c(0, 5),c(0, 1), pch = 16)
lines(c(0,1), c(0, 1))
plot(c(0, 2),c(0, 1), pch = 16)
lines(c(0,1), c(0, 1))
lines(c(1,2), c(1,1))
plot(c(2, 5),c(4, 1), pch = 16)
lines(c(2,2), c(4, 1))
plot(c(2, 3),c(4, 1), pch = 16)
lines(c(2,2), c(4, 1))
lines(c(4,3), c(1,1))
plot(c(2, 3),c(4, 1), pch = 16)
lines(c(2,2), c(4, 1))
lines(c(2,3), c(1,1))
plot(c(0, 2),c(0, 4), pch = 16)
lines (c(2,2), c(2,4))
lines(c(0,2), c(0,2))
lines(c(0,2),c(0,4))
plot(c(0, 2),c(0, 4), pch = 16)
lines (c(2,2), c(2,4))
lines(c(0,2), c(0,2))
plot(c(0, 2),c(0, 4),xlim=c(0,4), pch = 16)
lines (c(2,2), c(2,4))
lines(c(0,2), c(0,2))
plot(c(2, 3),c(4, 1), pch = 16)
plot(c(0, 2),c(0, 1), pch = 16)
plot(c(2, 3),c(4, 1), ylim = c(0,2),pch = 16)
lines(c(0,1), c(0, 1))
lines(c(1,2), c(1,1))
plot(c(0, 2),c(0, 1), pch = 16)
lines(c(0,1), c(0, 1))
lines(c(1,2), c(1,1))
plot(c(0, 2),c(0, 1), ylim = c(0,2), pch = 16)
lines(c(0,1), c(0, 1))
lines(c(1,2), c(1,1))
