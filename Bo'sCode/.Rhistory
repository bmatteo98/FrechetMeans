return(length(common) == 0)
}
OneVertex <- function (p, P, height){
pnormal = NormalVec(p, height)
pt = pnormal
n = length(p)
while ((IsVertex(pt, P)) != TRUE){
infos = apply(P, 2, function(x) list(Infor(pt, x, 1), Infor(pt, x, 2)))
vcl = closures(infos , 2, n)
dirs = c()
for (vc in vcl){
if (length(vc) == 1) dirs = c(dirs,vc)
}
dirs = sort(dirs)
dir = c(dirs[1])
dist = min (unlist(apply (P, 2, function (y) FlatPerturb(p,y,c(), dir)[1])))
pt = NormalVec(AddPerturb(pt, c(), dir, dist), height)
}
return (pt)
}
OneVertex(p, sp2, 2)
inList <- function (vec, list){
if (length(list)==0) return (FALSE)
for (j in 1:length(list)){
if (all((unlist(list[[j]])) == vec)) return (TRUE)
}
return (FALSE)
}
FMPolytope <- function (p, P, height){
v = OneVertex(p, P, height)
vertices = list(v)
minsum = ssq (v, P)
pnormal = NormalVec(v, height)
current =list(pnormal)
nextround = list(1)
while (length(nextround) != 0){
nextround = list()
for (pt in current){
flats = FlatDirs(pt, P)
candidates = flats[[1]]
if (length(candidates) == 0) return(list(minsum, length(vertices), vertices))
dists = unlist(flats[[2]])
for (index in 1:length(candidates)){
candidate = candidates [[index]]
dist = dists [index]
pnew = NormalVec(AddPerturb(pt, candidate, c(), dist), height)
if ((inList(pnew, vertices) == FALSE) && (inList(pnew, current) == FALSE) && (inList(pnew, nextround) == FALSE) && (IsVertex(pnew, P))){
nextround = append(nextround, pnew)
vertices = append(vertices, pnew)
}
}
}
current = nextround
}
return (list(minsum, length(vertices), vertices))
}
closures <- function (Info, pos, n){
cls = lapply(1:n, function(i) closure(Info, pos, i))
o = cls
for (cl in o){
cl = unlist (cl)
rem = setdiff(1:n, cl)
cands = powerSet(rem)
for (cand in cands){
if (length(cand) == 0) next
newcl = as.numeric(cl)
newcls = list()
for (i in 1:length(cand)){
newcls[[i]] = cls[[cand[[i]]]]
}
for (s in newcls){
newcl = union(newcl, s)
}
o[[length(o)+1]] = newcl
}
}
o = unique (o)
for (j in length(o):1){
o[[j]] = sort(round(o[[j]], 2))
if (length(o[[j]])==n) {
o = o[-c(j)]
}
}
return (unique(o))
}
sp1 = cbind(c(9/100, 19/50, 19/50, 1, 19/50, 19/50, 1, 19/50, 1, 1), c(1, 1, 1, 1, 21/100, 57/100, 61/100, 57/100, 61/100, 61/100), c(31/50, 1, 49/50, 49/50, 1, 49/50, 49/50, 1, 1, 63/100), c(1, 1, 1, 47/100, 7/50, 4/5, 1, 4/5, 1, 1))
p = c(48/25, 48/25, 48/25, 193/100, 8/5, 43/25, 2, 43/25, 2, 193/100)
fmp = FMPolytope(p, sp1, 2)
View(fmp)
29/16
FMPolytope <- function (p, P, height){
v = OneVertex(p, P, height)
vertices = list(v)
minsum = ssq (v, P)
pnormal = NormalVec(v, height)
current =list(pnormal)
nextround = list(1)
while (length(nextround) != 0){
nextround = list()
for (pt in current){
flats = FlatDirs(pt, P)
candidates = flats[[1]]
if (length(candidates) == 0) return(list(minsum, length(vertices), vertices))
dists = unlist(flats[[2]])
for (index in 1:length(candidates)){
candidate = candidates [[index]]
dist = dists [index]
pnew = NormalVec(AddPerturb(pt, candidate, c(), dist), height)
if ((inList(pnew, vertices) == FALSE) && (inList(pnew, current) == FALSE) && (inList(pnew, nextround) == FALSE) && (IsVertex(pnew, P))){
nextround[length(nextround)+1] =  pnew
vertices[length(vertices)+1] =  pnew
}
}
}
current = nextround
}
return (list(minsum, length(vertices), vertices))
}
p = c(48/25, 48/25, 48/25, 193/100, 8/5, 43/25, 2, 43/25, 2, 193/100)
fmp = FMPolytope(p, sp1, 2)
warnings()
FMPolytope <- function (p, P, height){
v = OneVertex(p, P, height)
vertices = list(v)
minsum = ssq (v, P)
pnormal = NormalVec(v, height)
current =list(pnormal)
nextround = list(1)
while (length(nextround) != 0){
nextround = list()
for (pt in current){
flats = FlatDirs(pt, P)
candidates = flats[[1]]
if (length(candidates) == 0) return(list(minsum, length(vertices), vertices))
dists = unlist(flats[[2]])
for (index in 1:length(candidates)){
candidate = candidates [[index]]
dist = dists [index]
pnew = NormalVec(AddPerturb(pt, candidate, c(), dist), height)
if ((inList(pnew, vertices) == FALSE) && (inList(pnew, current) == FALSE) && (inList(pnew, nextround) == FALSE) && (IsVertex(pnew, P))){
nextround[[length(nextround)+1]] =  pnew
vertices[[length(vertices)+1]] =  pnew
}
}
}
current = nextround
}
return (list(minsum, length(vertices), vertices))
}
fmp = FMPolytope(p, sp1, 2)
FMPolytope <- function (p, P, height){
v = OneVertex(p, P, height)
vertices = list(v)
minsum = ssq (v, P)
pnormal = NormalVec(v, height)
current =list(pnormal)
nextround = list(1)
while (length(nextround) != 0){
nextround = list()
for (pt in current){
flats = FlatDirs(pt, P)
candidates = flats[[1]]
if (length(candidates) == 0) return(list(minsum, length(vertices), vertices))
dists = unlist(flats[[2]])
for (index in 1:length(candidates)){
candidate = candidates [[index]]
dist = dists [index]
pnew = NormalVec(AddPerturb(pt, candidate, c(), dist), height)
if ((inList(pnew, vertices) == FALSE) && (inList(pnew, current) == FALSE) && (inList(pnew, nextround) == FALSE) && (IsVertex(pnew, P))){
print(pnew)
nextround[[length(nextround)+1]] =  pnew
vertices[[length(vertices)+1]] =  pnew
}
}
}
current = nextround
}
return (list(minsum, length(vertices), vertices))
}
fmp = FMPolytope(p, sp1, 2)
FMPolytope <- function (p, P, height){
v = OneVertex(p, P, height)
vertices = list(v)
minsum = ssq (v, P)
pnormal = NormalVec(v, height)
current =list(pnormal)
nextround = list(1)
while (length(nextround) != 0){
print(nextround)
nextround = list()
for (pt in current){
flats = FlatDirs(pt, P)
candidates = flats[[1]]
if (length(candidates) == 0) return(list(minsum, length(vertices), vertices))
dists = unlist(flats[[2]])
for (index in 1:length(candidates)){
candidate = candidates [[index]]
dist = dists [index]
pnew = NormalVec(AddPerturb(pt, candidate, c(), dist), height)
if ((inList(pnew, vertices) == FALSE) && (inList(pnew, current) == FALSE) && (inList(pnew, nextround) == FALSE) && (IsVertex(pnew, P))){
#print(pnew)
nextround[[length(nextround)+1]] =  pnew
vertices[[length(vertices)+1]] =  pnew
}
}
}
current = nextround
}
return (list(minsum, length(vertices), vertices))
}
fmp = FMPolytope(p, sp1, 2)
FMPolytope <- function (p, P, height){
v = OneVertex(p, P, height)
vertices = list(v)
minsum = ssq (v, P)
pnormal = NormalVec(v, height)
current =list(pnormal)
nextround = list(1)
while (length(nextround) != 0){
#print(nextround)
nextround = list()
for (pt in current){
flats = FlatDirs(pt, P)
candidates = flats[[1]]
if (length(candidates) == 0) return(list(minsum, length(vertices), vertices))
dists = unlist(flats[[2]])
print(length(candidates))
for (index in 1:length(candidates)){
candidate = candidates [[index]]
dist = dists [index]
pnew = NormalVec(AddPerturb(pt, candidate, c(), dist), height)
if ((inList(pnew, vertices) == FALSE) && (inList(pnew, current) == FALSE) && (inList(pnew, nextround) == FALSE) && (IsVertex(pnew, P))){
#print(pnew)
nextround[[length(nextround)+1]] =  pnew
vertices[[length(vertices)+1]] =  pnew
}
}
}
current = nextround
}
return (list(minsum, length(vertices), vertices))
}
fmp = FMPolytope(p, sp1, 2)
fmp
fmp[[3]][1]
1.99 1.99 1.99 2.00 1.67 1.79 2.00 1.79 2.00 2.00
c(199/100, 199/100, 199/100, 2, 167/100, 179/100, 2, 179/100, 2, 2)
FMPolytope <- function (p, P, height){
v = OneVertex(p, P, height)
vertices = list(v)
minsum = ssq (v, P)
pnormal = NormalVec(v, height)
current =list(pnormal)
nextround = list(1)
I = 0
while (length(nextround) != 0){
#print(nextround)
nextround = list()
for (pt in current){
flats = FlatDirs(pt, P)
candidates = flats[[1]]
if (length(candidates) == 0) return(list(minsum, length(vertices), vertices))
dists = unlist(flats[[2]])
#print(length(candidates))
for (index in 1:length(candidates)){
candidate = candidates [[index]]
dist = dists [index]
pnew = NormalVec(AddPerturb(pt, candidate, c(), dist), height)
if ((inList(pnew, vertices) == FALSE) && (inList(pnew, current) == FALSE) && (inList(pnew, nextround) == FALSE) && (IsVertex(pnew, P))){
I = I +1
print(I)
nextround[[length(nextround)+1]] =  pnew
vertices[[length(vertices)+1]] =  pnew
}
}
}
current = nextround
}
return (list(minsum, length(vertices), vertices))
}
fmp = FMPolytope(p, sp1, 2)
FMPolytope <- function (p, P, height){
v = OneVertex(p, P, height)
vertices = list(v)
minsum = ssq (v, P)
pnormal = NormalVec(v, height)
current =list(pnormal)
nextround = list(1)
I = 0
while (length(nextround) != 0){
#print(nextround)
nextround = list()
for (pt in current){
flats = FlatDirs(pt, P)
candidates = flats[[1]]
if (length(candidates) == 0) return(list(minsum, length(vertices), vertices))
dists = unlist(flats[[2]])
#print(length(candidates))
for (index in 1:length(candidates)){
candidate = candidates [[index]]
dist = dists [index]
pnew = NormalVec(AddPerturb(pt, candidate, c(), dist), height)
if ((inList(pnew, vertices) == FALSE) && (inList(pnew, current) == FALSE) && (inList(pnew, nextround) == FALSE) && (IsVertex(pnew, P))){
I = I +1
print(I)
print(pnew)
nextround[[length(nextround)+1]] =  pnew
vertices[[length(vertices)+1]] =  pnew
}
}
}
current = nextround
}
return (list(minsum, length(vertices), vertices))
}
fmp = FMPolytope(p, sp1, 2)
Frechet <- function (P, heigth){
n = length(p)
pt = OneFrechet(rep(heigth, n), P, heigth)
if (IsFrechet(pt, P)==FALSE) return("Could not find one Frechet Mean")
else (return (list (pt, FMPolytope(pt, P, heigth))))
}
Frechet(sp2, 2)
p = c(1/5, 2/5, 2, 2/5, 2, 2)
sp2 = cbind(c(1/5, 2/5, 2, 2/5, 2, 2), c(2, 2, 2, 2/5, 2/5, 1/5), c(2/5, 2/5, 2, 1/5, 2, 2))
Frechet(sp2, 2)
FMsp2 = Frechet(sp2, 2)
View(FMsp2)
inList <- function (vec, list){
if (length(list)==0) return (FALSE)
for (j in 1:length(list)){
if ((all((round(unlist(list[[j]]), 5))) == round(vec, 5))) return (TRUE)
}
return (FALSE)
}
FMsp2 = Frechet(sp2, 2)
inList <- function (vec, list){
if (length(list)==0) return (FALSE)
for (j in 1:length(list)){
if (all((unlist(list[[j]])) == vec)) return (TRUE)
}
return (FALSE)
}
FMsp2 =Frechet(sp2, 2)
inList <- function (vec, list){
if (length(list)==0) return (FALSE)
for (j in 1:length(list)){
listj = round(unlist(list[[j]]), 5)
vec = round(vec, 5)
if (all( listj == vec)) return (TRUE)
}
return (FALSE)
}
FMsp2 =Frechet(sp2, 2)
View(FMsp2)
fmp = FMPolytope(p, sp1, 2)
sp1 = cbind(c(9/100, 19/50, 19/50, 1, 19/50, 19/50, 1, 19/50, 1, 1), c(1, 1, 1, 1, 21/100, 57/100, 61/100, 57/100, 61/100, 61/100), c(31/50, 1, 49/50, 49/50, 1, 49/50, 49/50, 1, 1, 63/100), c(1, 1, 1, 47/100, 7/50, 4/5, 1, 4/5, 1, 1))
p = c(48/25, 48/25, 48/25, 193/100, 8/5, 43/25, 2, 43/25, 2, 193/100)
fmp = FMPolytope(p, sp1, 2)
FMPolytope <- function (p, P, height){
v = OneVertex(p, P, height)
vertices = list(v)
minsum = ssq (v, P)
pnormal = NormalVec(v, height)
current =list(pnormal)
nextround = list(1)
while (length(nextround) != 0){
#print(nextround)
nextround = list()
for (pt in current){
flats = FlatDirs(pt, P)
candidates = flats[[1]]
if (length(candidates) == 0) return(list(minsum, length(vertices), vertices))
dists = unlist(flats[[2]])
#print(length(candidates))
for (index in 1:length(candidates)){
candidate = candidates [[index]]
dist = dists [index]
pnew = NormalVec(AddPerturb(pt, candidate, c(), dist), height)
if ((inList(pnew, vertices) == FALSE) && (inList(pnew, current) == FALSE) && (inList(pnew, nextround) == FALSE) && (IsVertex(pnew, P))){
nextround[[length(nextround)+1]] =  pnew
vertices[[length(vertices)+1]] =  pnew
}
}
}
current = nextround
}
return (list(minsum, length(vertices), vertices))
}
FMsp1 = Frechet(sp1, 2)
View(FMsp1)
skinny = cbind(c(0,0,0), c(0,2,4), c(0,5,1))
OneFrechet(c(0,0,0), skinny, 2)
FMskinny = Frechet(skinny, 2)
IsFrechet <- function (p, L) {# L is a matrix, p is a vector
m = ncol(L)
n = length(p)
allpeaks = Peakpairs(p, L[,1])
print(allpeaks)
allpeaks = cbind(rep(1, nrow(allpeaks)), allpeaks)
for (i in 2:m){
pp = Peakpairs(p, L[,i])
pp = cbind(rep(i, nrow(pp)), pp)
pp = pp[order(pp[,2]),]
allpeaks = rbind(allpeaks,pp)
}
#allpeaks [4:6,] = rbind(c(2,1,4), c(2,1,5), c(2,1,6))
S = matrix(0, nrow = n, ncol = nrow(allpeaks))
for (j in 1: nrow(allpeaks)){
peack = allpeaks[j,]
S[peack[2], j] = p[peack[2]] - p[peack[3]] + L[ peack[3], peack[1]] - L[ peack[2], peack[1]]
S[peack[3], j] = p[peack[3]] - p[peack[2]] + L[ peack[2], peack[1]] - L[peack[3], peack[1]]
#print(S)
}
w = matrix(0, nrow = m, ncol = nrow(allpeaks))
for (i in 1:m){
ones = which(allpeaks[,1] == i)
w[i,ones] = rep(1, length(ones))
}
b = c(rep(0,n), rep(1,m))
A = rbind(S,w)
sol = xranges(E = A, F = b, ispos=TRUE)
return (is.numeric(sol))
}
FMskinny = Frechet(skinny, 2)
IsFrechet <- function (p, L) {# L is a matrix, p is a vector
m = ncol(L)
n = length(p)
allpeaks = Peakpairs(p, L[,1])
print(p)
print(L[,1])
allpeaks = cbind(rep(1, nrow(allpeaks)), allpeaks)
for (i in 2:m){
pp = Peakpairs(p, L[,i])
pp = cbind(rep(i, nrow(pp)), pp)
pp = pp[order(pp[,2]),]
allpeaks = rbind(allpeaks,pp)
}
#allpeaks [4:6,] = rbind(c(2,1,4), c(2,1,5), c(2,1,6))
S = matrix(0, nrow = n, ncol = nrow(allpeaks))
for (j in 1: nrow(allpeaks)){
peack = allpeaks[j,]
S[peack[2], j] = p[peack[2]] - p[peack[3]] + L[ peack[3], peack[1]] - L[ peack[2], peack[1]]
S[peack[3], j] = p[peack[3]] - p[peack[2]] + L[ peack[2], peack[1]] - L[peack[3], peack[1]]
#print(S)
}
w = matrix(0, nrow = m, ncol = nrow(allpeaks))
for (i in 1:m){
ones = which(allpeaks[,1] == i)
w[i,ones] = rep(1, length(ones))
}
b = c(rep(0,n), rep(1,m))
A = rbind(S,w)
sol = xranges(E = A, F = b, ispos=TRUE)
return (is.numeric(sol))
}
FMskinny = Frechet(skinny, 2)
Frechet <- function (P, heigth){
n = length(p)
pt = OneFrechet(rep(heigth, n), P, heigth)
print(pt)
if (IsFrechet(pt, P)==FALSE) return("Could not find one Frechet Mean")
else (return (list (pt, FMPolytope(pt, P, heigth))))
}
Frechet <- function (P, heigth){
n = length(p)
pt = OneFrechet(rep(heigth, n), P, heigth)
print(pt)
print("p")
print(IsFrechet(pt, P))
if (IsFrechet(pt, P)==FALSE) return("Could not find one Frechet Mean")
else (return (list (pt, FMPolytope(pt, P, heigth))))
}
FMskinny = Frechet(skinny, 2)
Frechet <- function (P, heigth){
n = nrow(P)
pt = OneFrechet(rep(heigth, n), P, heigth)
print(IsFrechet(pt, P))
if (IsFrechet(pt, P)==FALSE) return("Could not find one Frechet Mean")
else (return (list (pt, FMPolytope(pt, P, heigth))))
}
IsFrechet <- function (p, L) {# L is a matrix, p is a vector
m = ncol(L)
n = length(p)
allpeaks = Peakpairs(p, L[,1])
allpeaks = cbind(rep(1, nrow(allpeaks)), allpeaks)
for (i in 2:m){
pp = Peakpairs(p, L[,i])
pp = cbind(rep(i, nrow(pp)), pp)
pp = pp[order(pp[,2]),]
allpeaks = rbind(allpeaks,pp)
}
#allpeaks [4:6,] = rbind(c(2,1,4), c(2,1,5), c(2,1,6))
S = matrix(0, nrow = n, ncol = nrow(allpeaks))
for (j in 1: nrow(allpeaks)){
peack = allpeaks[j,]
S[peack[2], j] = p[peack[2]] - p[peack[3]] + L[ peack[3], peack[1]] - L[ peack[2], peack[1]]
S[peack[3], j] = p[peack[3]] - p[peack[2]] + L[ peack[2], peack[1]] - L[peack[3], peack[1]]
#print(S)
}
w = matrix(0, nrow = m, ncol = nrow(allpeaks))
for (i in 1:m){
ones = which(allpeaks[,1] == i)
w[i,ones] = rep(1, length(ones))
}
b = c(rep(0,n), rep(1,m))
A = rbind(S,w)
sol = xranges(E = A, F = b, ispos=TRUE)
return (is.numeric(sol))
}
FMskinny = Frechet(skinny, 2)
View(FMskinny)
