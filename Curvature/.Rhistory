sum(curvatures=="undefined")/length(curvatures)
sum(curvaturesN==0)/length(curvaturesN)
sum(curvaturesN==1)/length(curvaturesN)
sum(curvaturesN==-1)/length(curvaturesN)
sum(curvaturesN=="undefined")/length(curvaturesN)
curvatures = c()
curvaturesN = c()
for (i in 1:10){
x = sample(0:10, size = 2, replace = TRUE)
y  = sample(c(0:10), size = 2, replace = TRUE)
z  = sample(c(0:10), size = 2, replace = TRUE)
while ((identical(x,y)) | (identical(x,z)) | (identical(z,y))){
x = c(sample(0:10, size = 2, replace = TRUE))
y = c(sample(c(0:10), size = 2, replace = TRUE))
z  = c(sample(c(0:10), size = 2, replace = TRUE))
}
xN = c(0,x)
yN = c(0,y)
zN = c(0,z)
P = matrix(c(x,y, z),nrow=length(x))
PN = matrix(c(xN,yN, zN),nrow=length(xN))
cv = curvature(P)
cvN = curvatureN(PN)
curvatures = c(curvatures, cv)
curvaturesN = c(curvaturesN, cvN)
#print(P)
#plotTR2(P, cv)
#plotTRN(PN, cvN)
}
sum(curvatures==0)/length(curvatures)
sum(curvatures==1)/length(curvatures)
sum(curvatures==-1)/length(curvatures)
sum(curvatures=="undefined")/length(curvatures)
sum(curvaturesN==0)/length(curvaturesN)
sum(curvaturesN==1)/length(curvaturesN)
sum(curvaturesN==-1)/length(curvaturesN)
sum(curvaturesN=="undefined")/length(curvaturesN)
library(ape)
library(adephylo)
projTroursPt <- function (leaves, ultra = F){
Tr = rtree(leaves)
if (ultra) Tr = as.phylo(as.hclust(chronos(Tr, lambda=0, quiet=TRUE) ))
Trd = distTips(Tr, tips = "all", method = "patristic", useC = TRUE)
pt = Trd - Trd[1]
return( pt)
}
round(as.numeric(projTroursPt(5, T), 8))
round(as.numeric(projTroursPt(5, F), 8))
round(as.numeric(projTroursPt(5, F), 8))
rtree(5)
distTips(rtree(5))
tr = distTips(rtree(5))
tr-tr[1]
projTroursPt(5, F)
as.numeric(projTroursPt(5, F), 8)
as.numeric(projTroursPt(5, F))
round(as.numeric(projTroursPt(5, F)), 8)
round(as.numeric(projTroursPt(5, F)), 8)
round(as.numeric(projTroursPt(5, F)), 8)
round(as.numeric(projTroursPt(5, F)), 8)
as.numeric(projTroursPt(5, F))
round(as.numeric(projTroursPt(5, F)), 8)
round(as.numeric(projTroursPt(5, F)), 8)
curvatures = c()
curvaturesN = c()
for (i in 1:10){
x = sample(0:10, size = 2, replace = TRUE)
y  = sample(c(0:10), size = 2, replace = TRUE)
z  = sample(c(0:10), size = 2, replace = TRUE)
while ((identical(x,y)) & (identical(x,z)) & (identical(z,y))){
x = c(sample(0:10, size = 2, replace = TRUE))
y = c(sample(c(0:10), size = 2, replace = TRUE))
z  = c(sample(c(0:10), size = 2, replace = TRUE))
}
xN = c(0,x)
yN = c(0,y)
zN = c(0,z)
P = matrix(c(x,y, z),nrow=length(x))
PN = matrix(c(xN,yN, zN),nrow=length(xN))
cv = curvature(P)
cvN = curvatureN(PN)
curvatures = c(curvatures, cv)
curvaturesN = c(curvaturesN, cvN)
#print(P)
#plotTR2(P, cv)
#plotTRN(PN, cvN)
}
sum(curvatures==0)/length(curvatures)
sum(curvatures==1)/length(curvatures)
sum(curvatures==-1)/length(curvatures)
sum(curvatures=="undefined")/length(curvatures)
sum(curvaturesN==0)/length(curvaturesN)
sum(curvaturesN==1)/length(curvaturesN)
sum(curvaturesN==-1)/length(curvaturesN)
sum(curvaturesN=="undefined")/length(curvaturesN)
projTroursPt <- function (leaves, ultra = F){
Tr = rtree(leaves)
if (ultra) Tr = as.phylo(as.hclust(chronos(Tr, lambda=0, quiet=TRUE) ))
Trd = distTips(Tr, tips = "all", method = "patristic", useC = TRUE)
pt = Trd - Trd[1]
return( pt)
}
curvatures = c()
for (i in 1:10){
while((identical(a,b)) | (identical(b,c)) | (identical(a,c))){
a = round(as.numeric(projTroursPt(5, F)), 8)
b = round(as.numeric(projTroursPt(5, F)), 8)
c = round(as.numeric(projTroursPt(5, F)), 8)
}
P = matrix(c(a,b, c),nrow=length(a))
curvatures = c(curvatures, curvatureN(P))
}
sum(curvatures==0)/length(curvatures)
sum(curvatures==1)/length(curvatures)
sum(curvatures==-1)/length(curvatures)
sum(curvatures=="undefined")/length(curvatures)
curvatures = c()
for (i in 1:10){
a = round(as.numeric(projTroursPt(5, F)), 8)
b = round(as.numeric(projTroursPt(5, F)), 8)
c = round(as.numeric(projTroursPt(5, F)), 8)
while((identical(a,b)) | (identical(b,c)) | (identical(a,c))){
a = round(as.numeric(projTroursPt(5, F)), 8)
b = round(as.numeric(projTroursPt(5, F)), 8)
c = round(as.numeric(projTroursPt(5, F)), 8)
}
P = matrix(c(a,b, c),nrow=length(a))
curvatures = c(curvatures, curvatureN(P))
}
sum(curvatures==0)/length(curvatures)
sum(curvatures==1)/length(curvatures)
sum(curvatures==-1)/length(curvatures)
sum(curvatures=="undefined")/length(curvatures)
curvatures = c()
for (i in 1:100){
a = round(as.numeric(projTroursPt(5, F)), 8)
b = round(as.numeric(projTroursPt(5, F)), 8)
c = round(as.numeric(projTroursPt(5, F)), 8)
while((identical(a,b)) | (identical(b,c)) | (identical(a,c))){
a = round(as.numeric(projTroursPt(5, F)), 8)
b = round(as.numeric(projTroursPt(5, F)), 8)
c = round(as.numeric(projTroursPt(5, F)), 8)
}
P = matrix(c(a,b, c),nrow=length(a))
curvatures = c(curvatures, curvatureN(P))
}
sum(curvatures==0)/length(curvatures)
sum(curvatures==1)/length(curvatures)
sum(curvatures==-1)/length(curvatures)
sum(curvatures=="undefined")/length(curvatures)
round(as.numeric(projTroursPt(3, F)), 8)
curvatures = c()
for (i in 1:100){
a = round(as.numeric(projTroursPt(3, F)), 8)
b = round(as.numeric(projTroursPt(3, F)), 8)
c = round(as.numeric(projTroursPt(3, F)), 8)
while((identical(a,b)) | (identical(b,c)) | (identical(a,c))){
a = round(as.numeric(projTroursPt(3, F)), 8)
b = round(as.numeric(projTroursPt(3, F)), 8)
c = round(as.numeric(projTroursPt(3, F)), 8)
}
P = matrix(c(a,b, c),nrow=length(a))
curvatures = c(curvatures, curvatureN(P))
}
sum(curvatures==0)/length(curvatures)
sum(curvatures==1)/length(curvatures)
sum(curvatures==-1)/length(curvatures)
sum(curvatures=="undefined")/length(curvatures)
curvatures = c()
for (i in 1:100){
a = round(as.numeric(projTroursPt(3, F)), 8)
b = round(as.numeric(projTroursPt(3, F)), 8)
c = round(as.numeric(projTroursPt(3, F)), 8)
while((identical(a,b)) | (identical(b,c)) | (identical(a,c))){
a = round(as.numeric(projTroursPt(3, F)), 8)
b = round(as.numeric(projTroursPt(3, F)), 8)
c = round(as.numeric(projTroursPt(3, F)), 8)
}
P = matrix(c(a,b, c),nrow=length(a))
curvatures = c(curvatures, curvatureN(P))
}
sum(curvatures==0)/length(curvatures)
sum(curvatures==1)/length(curvatures)
sum(curvatures==-1)/length(curvatures)
sum(curvatures=="undefined")/length(curvatures)
curvatures = c()
for (i in 1:100){
a = round(as.numeric(projTroursPt(4, F)), 8)
b = round(as.numeric(projTroursPt(4, F)), 8)
c = round(as.numeric(projTroursPt(4, F)), 8)
while((identical(a,b)) | (identical(b,c)) | (identical(a,c))){
a = round(as.numeric(projTroursPt(4, F)), 8)
b = round(as.numeric(projTroursPt(4, F)), 8)
c = round(as.numeric(projTroursPt(4, F)), 8)
}
P = matrix(c(a,b, c),nrow=length(a))
curvatures = c(curvatures, curvatureN(P))
}
sum(curvatures==0)/length(curvatures)
sum(curvatures==1)/length(curvatures)
sum(curvatures==-1)/length(curvatures)
sum(curvatures=="undefined")/length(curvatures)
curvatures = c()
for (i in 1:100){
a = round(as.numeric(projTroursPt(5, F)), 8)
b = round(as.numeric(projTroursPt(5, F)), 8)
c = round(as.numeric(projTroursPt(5, F)), 8)
while((identical(a,b)) | (identical(b,c)) | (identical(a,c))){
a = round(as.numeric(projTroursPt(5, F)), 8)
b = round(as.numeric(projTroursPt(5, F)), 8)
c = round(as.numeric(projTroursPt(5, F)), 8)
}
P = matrix(c(a,b, c),nrow=length(a))
curvatures = c(curvatures, curvatureN(P))
}
sum(curvatures==0)/length(curvatures)
sum(curvatures==1)/length(curvatures)
sum(curvatures==-1)/length(curvatures)
sum(curvatures=="undefined")/length(curvatures)
curvatures = c()
for (i in 1:100){
a = round(as.numeric(projTroursPt(5, T)), 8)
b = round(as.numeric(projTroursPt(5, T)), 8)
c = round(as.numeric(projTroursPt(5, T)), 8)
while((identical(a,b)) | (identical(b,c)) | (identical(a,c))){
a = round(as.numeric(projTroursPt(5, T)), 8)
b = round(as.numeric(projTroursPt(5, T)), 8)
c = round(as.numeric(projTroursPt(5, T)), 8)
}
P = matrix(c(a,b, c),nrow=length(a))
curvatures = c(curvatures, curvatureN(P))
}
sum(curvatures==0)/length(curvatures)
sum(curvatures==1)/length(curvatures)
sum(curvatures==-1)/length(curvatures)
sum(curvatures=="undefined")/length(curvatures)
curvatures = c()
for (i in 1:100){
a = round(as.numeric(projTroursPt(5, T)), 8)
b = round(as.numeric(projTroursPt(5, T)), 8)
c = round(as.numeric(projTroursPt(5, T)), 8)
while((identical(a,b)) | (identical(b,c)) | (identical(a,c))){
a = round(as.numeric(projTroursPt(5, T)), 8)
b = round(as.numeric(projTroursPt(5, T)), 8)
c = round(as.numeric(projTroursPt(5, T)), 8)
}
P = matrix(c(a,b, c),nrow=length(a))
curvatures = c(curvatures, curvatureN(P))
}
sum(curvatures==0)/length(curvatures)
sum(curvatures==1)/length(curvatures)
sum(curvatures==-1)/length(curvatures)
sum(curvatures=="undefined")/length(curvatures)
curvatures = c()
for (i in 1:100){
a = round(as.numeric(projTroursPt(5, T)), 8)
b = round(as.numeric(projTroursPt(5, T)), 8)
c = round(as.numeric(projTroursPt(5, T)), 8)
while((identical(a,b)) | (identical(b,c)) | (identical(a,c))){
a = round(as.numeric(projTroursPt(5, T)), 8)
b = round(as.numeric(projTroursPt(5, T)), 8)
c = round(as.numeric(projTroursPt(5, T)), 8)
}
P = matrix(c(a,b, c),nrow=length(a))
print(P)
curvatures = c(curvatures, curvatureN(P))
}
sum(curvatures==0)/length(curvatures)
sum(curvatures==1)/length(curvatures)
sum(curvatures==-1)/length(curvatures)
sum(curvatures=="undefined")/length(curvatures)
curvatures = c()
for (i in 1:100){
a = round(as.numeric(projTroursPt(5, T)), 8)
b = round(as.numeric(projTroursPt(5, T)), 8)
c = round(as.numeric(projTroursPt(5, T)), 8)
while((identical(a,b)) | (identical(b,c)) | (identical(a,c))){
a = round(as.numeric(projTroursPt(5, T)), 8)
b = round(as.numeric(projTroursPt(5, T)), 8)
c = round(as.numeric(projTroursPt(5, T)), 8)
}
print(a)
print(b)
print(c)
P = matrix(c(a,b, c),nrow=length(a))
curvatures = c(curvatures, curvatureN(P))
}
sum(curvatures==0)/length(curvatures)
sum(curvatures==1)/length(curvatures)
sum(curvatures==-1)/length(curvatures)
sum(curvatures=="undefined")/length(curvatures)
a = c(0.0000000, 0.6666667, 1.3333333,1.3333333 ,0.6666667, 1.3333333, 1.3333333, 1.3333333, 1.3333333, 0.3333333)
b = c( 0.0,  0.0 , 1.0 , 1.0, -0.5 , 1.0,  1.0 , 1.0  ,1.0  ,0.0)
c= c(0.0000000 , 0.0000000,  0.0000000,  0.0000000, -1.3333333 ,-0.6666667 ,-0.6666667 ,-0.6666667 ,-0.6666667 ,-1.3333333)
dtr(a,b)
dtr(c,b)
dtr(c,a)
distancesN(a,b,c)
dC = distancesN(a,b,c)
all(dC[,1]>= dC[,2])
which(is.na(dC))
View(dC)
?remove
rm(NA, c(NA, 3, 4, 6))
curvatureN <- function (P){
curvS = 0
curvF = 0
sameDist = 0
perm = matrix(c(1,2,3,2,3,1,1,3,2), nrow = 3, byrow = TRUE)
for (j in 1:3){
one = perm[j,1]
two = perm[j,2]
three = perm[j,3]
a = P[,one]
b = P[,two]
c = P[,three]
distan = round(distancesN (a,b,c), 5)
distan = distan[ !is.na( distan) ]
if (all(distan[,1] == distan[,2])) sameDist = sameDist +1
else if (all(distan[,1] <= distan[,2])) curvS = curvS +1
else if (all(distan[,1] >= distan[,2])) curvF = curvF +1
else (return ("undefined"))
}
if (sameDist == 3) return (0)
else if ((sameDist+curvS) == 3) return (-1)
else if ((sameDist+curvF) == 3) return (1)
else return ("undefined")
}
curvatures = c()
for (i in 1:100){
a = round(as.numeric(projTroursPt(5, T)), 8)
b = round(as.numeric(projTroursPt(5, T)), 8)
c = round(as.numeric(projTroursPt(5, T)), 8)
while((identical(a,b)) | (identical(b,c)) | (identical(a,c))){
a = round(as.numeric(projTroursPt(5, T)), 8)
b = round(as.numeric(projTroursPt(5, T)), 8)
c = round(as.numeric(projTroursPt(5, T)), 8)
}
#print(a)
#print(b)
#print(c)
P = matrix(c(a,b, c),nrow=length(a))
curvatures = c(curvatures, curvatureN(P))
}
sum(curvatures==0)/length(curvatures)
sum(curvatures==1)/length(curvatures)
sum(curvatures==-1)/length(curvatures)
sum(curvatures=="undefined")/length(curvatures)
curvatures = c()
for (i in 1:100){
a = round(as.numeric(projTroursPt(5, T)), 8)
b = round(as.numeric(projTroursPt(5, T)), 8)
c = round(as.numeric(projTroursPt(5, T)), 8)
while((identical(a,b)) | (identical(b,c)) | (identical(a,c))){
a = round(as.numeric(projTroursPt(5, T)), 8)
b = round(as.numeric(projTroursPt(5, T)), 8)
c = round(as.numeric(projTroursPt(5, T)), 8)
}
#print(a)
#print(b)
#print(c)
P = matrix(c(a,b, c),nrow=length(a))
curvatures = c(curvatures, curvatureN(P))
}
sum(curvatures==0)/length(curvatures)
sum(curvatures==1)/length(curvatures)
sum(curvatures==-1)/length(curvatures)
sum(curvatures=="undefined")/length(curvatures)
curvatureN <- function (P){
curvS = 0
curvF = 0
sameDist = 0
perm = matrix(c(1,2,3,2,3,1,1,3,2), nrow = 3, byrow = TRUE)
for (j in 1:3){
one = perm[j,1]
two = perm[j,2]
three = perm[j,3]
a = P[,one]
b = P[,two]
c = P[,three]
distan = round(distancesN (a,b,c), 5)
distan = distan[ !is.na( distan[1,]), ]
if (all(distan[,1] == distan[,2])) sameDist = sameDist +1
else if (all(distan[,1] <= distan[,2])) curvS = curvS +1
else if (all(distan[,1] >= distan[,2])) curvF = curvF +1
else (return ("undefined"))
}
if (sameDist == 3) return (0)
else if ((sameDist+curvS) == 3) return (-1)
else if ((sameDist+curvF) == 3) return (1)
else return ("undefined")
}
curvatures = c()
for (i in 1:100){
a = round(as.numeric(projTroursPt(5, T)), 8)
b = round(as.numeric(projTroursPt(5, T)), 8)
c = round(as.numeric(projTroursPt(5, T)), 8)
while((identical(a,b)) | (identical(b,c)) | (identical(a,c))){
a = round(as.numeric(projTroursPt(5, T)), 8)
b = round(as.numeric(projTroursPt(5, T)), 8)
c = round(as.numeric(projTroursPt(5, T)), 8)
}
#print(a)
#print(b)
#print(c)
P = matrix(c(a,b, c),nrow=length(a))
curvatures = c(curvatures, curvatureN(P))
}
sum(curvatures==0)/length(curvatures)
sum(curvatures==1)/length(curvatures)
sum(curvatures==-1)/length(curvatures)
sum(curvatures=="undefined")/length(curvatures)
curvatures = c()
for (i in 1:100){
a = round(as.numeric(projTroursPt(5, T)), 8)
b = round(as.numeric(projTroursPt(5, T)), 8)
c = round(as.numeric(projTroursPt(5, T)), 8)
while((identical(a,b)) | (identical(b,c)) | (identical(a,c))){
a = round(as.numeric(projTroursPt(5, T)), 8)
b = round(as.numeric(projTroursPt(5, T)), 8)
c = round(as.numeric(projTroursPt(5, T)), 8)
}
print(a)
print(b)
print(c)
P = matrix(c(a,b, c),nrow=length(a))
curvatures = c(curvatures, curvatureN(P))
}
sum(curvatures==0)/length(curvatures)
sum(curvatures==1)/length(curvatures)
sum(curvatures==-1)/length(curvatures)
sum(curvatures=="undefined")/length(curvatures)
curvatures = c()
for (i in 1:100){
a = round(as.numeric(projTroursPt(5, T)), 8)
b = round(as.numeric(projTroursPt(5, T)), 8)
c = round(as.numeric(projTroursPt(5, T)), 8)
while((identical(a,b)) | (identical(b,c)) | (identical(a,c))){
a = round(as.numeric(projTroursPt(5, T)), 8)
b = round(as.numeric(projTroursPt(5, T)), 8)
c = round(as.numeric(projTroursPt(5, T)), 8)
}
print(a)
print(b)
print(c)
P = matrix(c(a,b, c),nrow=length(a))
curvatures = c(curvatures, curvatureN(P))
}
sum(curvatures==0)/length(curvatures)
sum(curvatures==1)/length(curvatures)
sum(curvatures==-1)/length(curvatures)
sum(curvatures=="undefined")/length(curvatures)
curvatures = c()
for (i in 1:100){
a = round(as.numeric(projTroursPt(5, T)), 8)
b = round(as.numeric(projTroursPt(5, T)), 8)
c = round(as.numeric(projTroursPt(5, T)), 8)
while((identical(a,b)) | (identical(b,c)) | (identical(a,c))){
a = round(as.numeric(projTroursPt(5, T)), 8)
b = round(as.numeric(projTroursPt(5, T)), 8)
c = round(as.numeric(projTroursPt(5, T)), 8)
}
print(a)
print(b)
print(c)
P = matrix(c(a,b, c),nrow=length(a))
curvatures = c(curvatures, curvatureN(P))
}
sum(curvatures==0)/length(curvatures)
sum(curvatures==1)/length(curvatures)
sum(curvatures==-1)/length(curvatures)
sum(curvatures=="undefined")/length(curvatures)
curvatures = c()
for (i in 1:100){
a = round(as.numeric(projTroursPt(5, T)), 8)
b = round(as.numeric(projTroursPt(5, T)), 8)
c = round(as.numeric(projTroursPt(5, T)), 8)
while((identical(a,b)) | (identical(b,c)) | (identical(a,c))){
a = round(as.numeric(projTroursPt(5, T)), 8)
b = round(as.numeric(projTroursPt(5, T)), 8)
c = round(as.numeric(projTroursPt(5, T)), 8)
}
print(a)
print(b)
print(c)
P = matrix(c(a,b, c),nrow=length(a))
curvatures = c(curvatures, curvatureN(P))
}
sum(curvatures==0)/length(curvatures)
sum(curvatures==1)/length(curvatures)
sum(curvatures==-1)/length(curvatures)
sum(curvatures=="undefined")/length(curvatures)
curvatures = c()
for (i in 1:100){
a = round(as.numeric(projTroursPt(4, T)), 8)
b = round(as.numeric(projTroursPt(4, T)), 8)
c = round(as.numeric(projTroursPt(4, T)), 8)
while((identical(a,b)) | (identical(b,c)) | (identical(a,c))){
a = round(as.numeric(projTroursPt(4, T)), 8)
b = round(as.numeric(projTroursPt(4, T)), 8)
c = round(as.numeric(projTroursPt(4, T)), 8)
}
print(a)
print(b)
print(c)
P = matrix(c(a,b, c),nrow=length(a))
curvatures = c(curvatures, curvatureN(P))
}
sum(curvatures==0)/length(curvatures)
sum(curvatures==1)/length(curvatures)
sum(curvatures==-1)/length(curvatures)
sum(curvatures=="undefined")/length(curvatures)
