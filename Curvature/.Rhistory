confint(mylm)
bootModel <- function (b, X){
n = nrow(X)
X = X[sample(1:n, replace = TRUE),]
lm(brain ~ log(body), data = mammals)$coeff[2]
}
cst = quantile(bootModel(1e3, mammals)-mylm$coefficients[2], c(0.025, 0.975))
bootModel <- function (b, X){
replicate(b,{
n = nrow(X)
X = X[sample(1:n, replace = TRUE),]
lm(brain ~ log(body), data = mammals)$coeff[2]
})
}
cst = quantile(bootModel(1e3, mammals)-mylm$coefficients[2], c(0.025, 0.975))
bootModel(1e3, mammals)
bootModel <- function (b){
replicate(b,{
n = nrow(mammals)
mammals = mammals[sample(1:n, replace = TRUE),]
lm(brain ~ log(body), data = mammals)$coeff[2]
})
}
cst = quantile(bootModel(1e3, mammals)-mylm$coefficients[2], c(0.025, 0.975))
bootModel <- function (b){
replicate(b,{
n = nrow(mammals)
mammals = mammals[sample(1:n, replace = TRUE),]
lm(brain ~ log(body), data = mammals)$coeff[2]
})
}
cst = quantile(bootModel(1e3)-mylm$coefficients[2], c(0.025, 0.975))
c(mylm$coefficients[2]-cst[2], mylm$coefficients[2]-cst[1])
View(mylm)
# bootstrapping residuals
X = cbind(rep(1, nrow(mammals)), log(body))
e = brain -
# bootstrapping residuals
X = cbind(rep(1, nrow(mammals)), log(mammals$body))
# bootstrapping residuals
X = cbind(rep(1, nrow(mammals)), log(mammals$body))
e = brain - X%*%mylm$coefficients
e = mammals$brain - X%*%mylm$coefficients
X = cbind(rep(1, nrow(mammals)), log(mammals$body))
Yhat =  X%*%mylm$coefficients
e = mammals$brain - Yhat
replicate(1e3, {
est = sample(e, replace = TRUE)
Yst = Yhat + est
lm(Yst ~ log(mammals$body))$coeff[2]
})
bootModel = replicate(1e3, {
est = sample(e, replace = TRUE)
Yst = Yhat + est
lm(Yst ~ log(mammals$body))$coeff[2]
})
cst = quantile(bootModel-mylm$coefficients[2], c(0.025, 0.975))
c(mylm$coefficients[2]-cst[2], mylm$coefficients[2]-cst[1])
X<-c(2,3,1,4,5,2)
Y<-c(3,1,7,6,4)
n<-length(X)
m <- length(Y)
X<-c(2,3,1,4,5,2)
Y<-c(3,1,7,6,4)
n<-length(X)
m<-length(Y)
T <- function(x,y) abs(mean(x)-mean(y))
Z = c(X,Y)
bootReplicate = replicate(1e3, {
x = sample(Z, n, replace = TRUE)
y = sampel(Z, m, replace = TRUE)
T(x,y)
})
bootReplicate = replicate(1e3, {
x = sample(Z, n, replace = TRUE)
y = sample(Z, m, replace = TRUE)
T(x,y)
})
TZ = T(X,Y)
mean(bootReplicate>=TZ)
pv=mean(bootReplicate>=TZ)
pv + sd(bootReplicate)/sqrt(1e3) * qnorm(c(0.025, 0.975))
# ex 1
G1 <- c(1.3,2.2,1.4,1.3,2.1,2.2,13.,1.2,1.3,2.4)
G2 <- c(-0.3,0.4,0.5,0.3,-1.3,-1.0,0.6,0.1,-0.4,1.2)
T <- function (x, y) abs(mean(x)-mean(y))
bootRep <- replicate(1e3, {
x = sample(c(G1, G2), size = length(G1), replace = TRUE)
y = sampe(c(G1, G2), sixe = length(G2), replace = TRUE)
T(x,y)
})
bootRep <- replicate(1e3, {
x = sample(c(G1, G2), size = length(G1), replace = TRUE)
y = sample(c(G1, G2), sixe = length(G2), replace = TRUE)
T(x,y)
})
bootRep <- replicate(1e3, {
x = sample(c(G1, G2), size = length(G1), replace = TRUE)
y = sample(c(G1, G2), size = length(G2), replace = TRUE)
T(x,y)
})
mean(c(bootRep, T(G1,G2))>= T(G1,G2)  )
x <- c( 1.7, 0.2, 3.2, 0.6, 0.5, 1.8, 4.6, 1.8, 0.9, 0.2, 1.9, 4.5, 7.6, 12.6, 20.3, 5.5, 2, 1, 3.4, 1.7)
x <- c( 1.7, 0.2, 3.2, 0.6, 0.5, 1.8, 4.6, 1.8, 0.9, 0.2, 1.9, 4.5, 7.6, 12.6, 20.3, 5.5, 2, 1, 3.4, 1.7)
mx = mean(x)
meanBoot <- replicate(1e3, {
X = sample(x, replace = TRUE)
mean(X)
})
cst = quantile(meanBoot, c(0.5, 0.95))
c(mx -cs[2], mx - cst[1])
c(mx -cst[2], mx - cst[1])
x <- c( 1.7, 0.2, 3.2, 0.6, 0.5, 1.8, 4.6, 1.8, 0.9, 0.2, 1.9, 4.5, 7.6, 12.6, 20.3, 5.5, 2, 1, 3.4, 1.7)
mx = mean(x^2)
meanBoot <- replicate(1e3, {
X = sample(x, replace = TRUE)
mean(X^2)
})
cst = quantile(meanBoot, c(0.5, 0.95))
c(mx -cst[2], mx - cst[1])
x <- c( 1.7, 0.2, 3.2, 0.6, 0.5, 1.8, 4.6, 1.8, 0.9, 0.2, 1.9, 4.5, 7.6, 12.6, 20.3, 5.5, 2, 1, 3.4, 1.7)
mx = mean(x^2)
meanBoot <- replicate(1e3, {
X = sample(x, replace = TRUE)
mean(X^2) - mx
})
cst = quantile(meanBoot, c(0.5, 0.95))
c(mx -cst[2], mx - cst[1])
x <- c( 1.7, 0.2, 3.2, 0.6, 0.5, 1.8, 4.6, 1.8, 0.9, 0.2, 1.9, 4.5, 7.6, 12.6, 20.3, 5.5, 2, 1, 3.4, 1.7)
mx = mean(x^2)
meanBoot <- replicate(1e4, {
X = sample(x, replace = TRUE)
mean(X^2) - mx
})
cst = quantile(meanBoot, c(0.5, 0.95))
c(mx -cst[2], mx - cst[1])
x <- c( 1.7, 0.2, 3.2, 0.6, 0.5, 1.8, 4.6, 1.8, 0.9, 0.2, 1.9, 4.5, 7.6, 12.6, 20.3, 5.5, 2, 1, 3.4, 1.7)
mx = mean(x^2)
meanBoot <- replicate(1e4, {
X = sample(x, replace = TRUE)
mean(X^2) - mx
})
cst = quantile(meanBoot, c(0.5, 0.95))
c(mx -cst[2], mx - cst[1])
x <- c( 1.7, 0.2, 3.2, 0.6, 0.5, 1.8, 4.6, 1.8, 0.9, 0.2, 1.9, 4.5, 7.6, 12.6, 20.3, 5.5, 2, 1, 3.4, 1.7)
mx = mean(x^2)
meanBoot <- replicate(1e4, {
X = sample(x, replace = TRUE)
mean(X^2) - mx
})
cst = quantile(meanBoot, c(0.05, 0.95))
c(mx -cst[2], mx - cst[1])
x <- c( 1.7, 0.2, 3.2, 0.6, 0.5, 1.8, 4.6, 1.8, 0.9, 0.2, 1.9, 4.5, 7.6, 12.6, 20.3, 5.5, 2, 1, 3.4, 1.7)
mx = mean(x^2)
meanBoot <- replicate(1e4, {
X = sample(x, replace = TRUE)
mean(X^2) - mx
})
cst = quantile(meanBoot, c(0.05, 0.95))
c(mx -cst[2], mx - cst[1])
x <- c( 1.7, 0.2, 3.2, 0.6, 0.5, 1.8, 4.6, 1.8, 0.9, 0.2, 1.9, 4.5, 7.6, 12.6, 20.3, 5.5, 2, 1, 3.4, 1.7)
mx = mean(x^2)
meanBoot <- replicate(1e4, {
X = sample(x, replace = TRUE)
mean(X^2) # wrong
})
cst = quantile(meanBoot - mx, c(0.05, 0.95))
c(mx -cst[2], mx - cst[1])
cst = quantile((meanBoot - mx)/sd(meanBoot), c(0.05, 0.95))
c(mx -cst[2]*sd(meanBoot), mx - cst[1]*sd(meanBoot))
c(mx -cst[2]*sd(x), mx - cst[1]*sd(x))
sdt<- function (x) sd(x^2)/sqrt(length(x))
cst = quantile((meanBoot - mx)/sdt(meanBoot), c(0.05, 0.95))
c(mx -cst[2]*sdt(x), mx - cst[1]*sdt(x))
x <- c( 1.7, 0.2, 3.2, 0.6, 0.5, 1.8, 4.6, 1.8, 0.9, 0.2, 1.9, 4.5, 7.6, 12.6, 20.3, 5.5, 2, 1, 3.4, 1.7)
mx = mean(x^2)
meanBoot <- replicate(1e4, {
X = sample(x, replace = TRUE)
mean(X^2)
})
sdt<- function (x) sd(x^2)/sqrt(length(x))
cst = quantile((meanBoot - mx)/sdt(meanBoot), c(0.05, 0.95))
c(mx -cst[2]*sdt(x), mx - cst[1]*sdt(x))
T <- function (x) mean(x^2)
b <- 1e4
s <- function(x) sd(x^2)/sqrt(length(x)) # careful: x^2! and sqrt(n)!
bootsamples <- replicate (b, { bx <- sample (x, replace = TRUE); (T(bx)-T(x))/s(bx)})
# studentised CI
T(x) - s(x)*quantile(bootsamples,c(0.95,0.05)) # careful: multiply by s(X)
x <- c( 1.7, 0.2, 3.2, 0.6, 0.5, 1.8, 4.6, 1.8, 0.9, 0.2, 1.9, 4.5, 7.6, 12.6, 20.3, 5.5, 2, 1, 3.4, 1.7)
sdt<- function (x) sd(x^2)/sqrt(length(x))
bootsamples <- replicate (b, { bx <- sample (x, replace = TRUE); mean(bx^2)})
cst = quantile((mean(bootsamples^2)-mean(x^2))/sdt(bootsamples), c(0.05, 0.95))
bootsamples <- replicate (1e4, { bx <- sample (x, replace = TRUE); mean(bx^2)})
cst = quantile((mean(bootsamples^2)-mean(x^2))/sdt(bootsamples), c(0.05, 0.95))
mx = mean(x^2)
c(mx -cst[2]*sdt(x), mx - cst[1]*sdt(x))
bootsamples <- replicate (1e4, { bx <- sample (x, replace = TRUE); mean(bx^2)})
cst = quantile((mean(bootsamples^2)-mean(x^2))/sdt(bootsamples), c(0.05, 0.95))
c(mx -cst[2]*sdt(x), mx - cst[1]*sdt(x))
x <- c( 1.7, 0.2, 3.2, 0.6, 0.5, 1.8, 4.6, 1.8, 0.9, 0.2, 1.9, 4.5, 7.6, 12.6, 20.3, 5.5, 2, 1, 3.4, 1.7)
T <- function (x) mean(x^2)
b <- 1e4
s <- function(x) sd(x^2)/sqrt(length(x))
bootsamples <- replicate (b, { bx <- sample (x, replace = TRUE); T(bx)})
cst = quantile((bootsamples-T(X))/s(bx),c(0.95,0.05))
c(T(x) - s(x)*cst[2],T(x) - s(x)* cst[1]) # careful: multiply by s(X)
T <- function (x) mean(x^2)
b <- 1e4
s <- function(x) sd(x^2)/sqrt(length(x))
bootsamples <- replicate (b, { bx <- sample (x, replace = TRUE); T(bx)})
cst = quantile((bootsamples-T(x))/s(bx),c(0.95,0.05))
c(T(x) - s(x)*cst[2],T(x) - s(x)* cst[1]) # careful: multiply by s(X)
T <- function (x) mean(x^2)
b <- 1e4
s <- function(x) sd(x^2)/sqrt(length(x))
bootsamples <- replicate (b, { bx <- sample (x, replace = TRUE); T(bx)})
cst = quantile((bootsamples-T(x))/s(bootsamples),c(0.95,0.05))
c(T(x) - s(x)*cst[2],T(x) - s(x)* cst[1])
T <- function (x) mean(x^2)
X = matrix(data = rexp(500*n, rate = 0.1), nrow = 500)
n = 20
X = matrix(data = rexp(500*n, rate = 0.1), nrow = 500)
n = 20
X = rexp(500*n, rate = 0.1)
x <- c( 1.7, 0.2, 3.2, 0.6, 0.5, 1.8, 4.6, 1.8, 0.9, 0.2, 1.9, 4.5, 7.6, 12.6, 20.3, 5.5, 2, 1, 3.4, 1.7)
n = 20
b = 1e3
X = rexp(500*n, rate = 0.1)
bootsamples <- replicate (b, { bx <- sample (X , length(x), replace = TRUE); (T(bx)-T(x))})
T(x) - quantile(bootsamples,c(0.95,0.05))
bootsamplesS <- replicate (b, { bx <- sample (X , length(x), replace = TRUE); (T(bx)-T(x))/s(bx)})
T(x) - s(x)*quantile(bootsamples,c(0.95,0.05))
n = 20
b = 1e3
s <- function(x) sd(x^2)/sqrt(length(x))
X = rexp(500*n, rate = 0.1)
bootsamples <- replicate (b, { bx <- sample (X , length(x), replace = TRUE); (T(bx)-T(x))})
T(x) - quantile(bootsamples,c(0.95,0.05))
bootsamplesS <- replicate (b, { bx <- sample (X , length(x), replace = TRUE); (T(bx)-T(x))/s(bx)})
T(x) - s(x)*quantile(bootsamples,c(0.95,0.05))
b = 1e3
s <- function(x) sd(x^2)/sqrt(length(x))
X = rexp(500*n, rate = 0.1)
bootsamples <- replicate (b, { bx <- sample (X , length(x), replace = TRUE); (T(bx)-T(x))})
T(x) - quantile(bootsamples,c(0.95,0.05))
bootsamplesS <- replicate (b, { bx <- sample (X , length(x), replace = TRUE); (T(bx)-T(x))/s(bx)})
T(x) - s(x)*quantile(bootsamples,c(0.05,0.95))
n = 20
b = 1e3
s <- function(x) sd(x^2)/sqrt(length(x))
X = rexp(500*n, rate = 0.1)
bootsamples <- replicate (b, { bx <- sample (X , length(x), replace = TRUE); (T(bx)-T(x))})
T(x) - quantile(bootsamples,c(0.05,0.95))
bootsamplesS <- replicate (b, { bx <- sample (X , length(x), replace = TRUE); (T(bx)-T(x))/s(bx)})
T(x) - s(x)*quantile(bootsamplesS,c(0.05,0.95))
n = 20
b = 1e3
s <- function(x) sd(x^2)/sqrt(length(x))
X = rexp(n, rate = 0.1)
bootsamples <- replicate(500, replicate (b, { bx <- sample (X , length(x), replace = TRUE); (T(bx)-T(x))}))
T(x) - quantile(bootsamples,c(0.05,0.95))
bootsamplesS <- replicate(500*replicate (b, { bx <- sample (X , length(x), replace = TRUE); (T(bx)-T(x))/s(bx)}))
T(x) - s(x)*quantile(bootsamplesS,c(0.05,0.95))
n = 20
b = 1e3
s <- function(x) sd(x^2)/sqrt(length(x))
X = rexp(n, rate = 0.1)
bootsamples <- replicate(500, replicate (b, { bx <- sample (X, replace = TRUE); (T(bx)-T(x))}))
T(x) - quantile(bootsamples,c(0.05,0.95))
bootsamplesS <- replicate(500*replicate (b, { bx <- sample (X, replace = TRUE); (T(bx)-T(x))/s(bx)}))
T(x) - s(x)*quantile(bootsamplesS,c(0.05,0.95))
T <- function (x) mean(x^2)
x <- c( 1.7, 0.2, 3.2, 0.6, 0.5, 1.8, 4.6, 1.8, 0.9, 0.2, 1.9, 4.5, 7.6, 12.6, 20.3, 5.5, 2, 1, 3.4, 1.7)
n = 20
b = 1e3
s <- function(x) sd(x^2)/sqrt(length(x))
X = rexp(n, rate = 0.1)
bootsamples <- replicate(500, replicate (b, { bx <- sample (X, replace = TRUE); (T(bx)-T(x))}))
T(x) - quantile(bootsamples,c(0.05,0.95))
bootsamplesS <- replicate(500*replicate (b, { bx <- sample (X, replace = TRUE); (T(bx)-T(x))/s(bx)}))
T(x) - s(x)*quantile(bootsamplesS,c(0.05,0.95))
bootsamplesS <- replicate(500,replicate (b, { bx <- sample (X, replace = TRUE); (T(bx)-T(x))/s(bx)}))
T(x) - s(x)*quantile(bootsamplesS,c(0.05,0.95))
mean(X^2)
n = 100
b = 1e3
s <- function(x) sd(x^2)/sqrt(length(x))
X = rexp(n, rate = 0.1)
mean(X^2)
n = 10000
s <- function(x) sd(x^2)/sqrt(length(x))
X = rexp(n, rate = 0.1)
mean(X^2)
n = 100000
X = rexp(n, rate = 0.1)
trueMean = mean(X^2)
CI= T(x) - quantile(bootsamples,c(0.05,0.95))
CIst=T(x) - s(x)*quantile(bootsamplesS,c(0.05,0.95))
mean(CI[2] <= trueMean & trueMean <= CI[1])
T <- function (x) mean(x^2)
X = iris$Petal.Width
Y = iris$Sepal.Width
msq = function (x) mean(x^2)
sdsq = function (x) sd(x^2)/sqrt(n)
bootsamplesSQ <- replicate (1e4, {
bx = sample(X, replace = TRUE)
(T(bx)-T(x))/sdsq(bx)
})
msq(X)-sdsq(X)* quantile(bootsamplesS,c(0.05,0.95))
msq = function (x) mean(x^2)
sdsq = function (x) sd(x^2)/sqrt(n)
bootsamplesSQ <- replicate (1e4, {
bx = sample(X, replace = TRUE)
(msq(bx)-msq(x))/sdsq(bx)
})
msq(X)-sdsq(X)* quantile(bootsamplesS,c(0.05,0.95))
bootsamplesSQ <- replicate (1e4, {
bx = sample(X, replace = TRUE)
(msq(bx)-msq(X))/sdsq(bx)
})
msq(X)-sdsq(X)* quantile(bootsamplesS,c(0.05,0.95))
msq = function (x) mean(x^2)
sdsq = function (x) sd(x^2)/sqrt(length(x))
bootsamplesSQ <- replicate (1e4, {
bx = sample(X, replace = TRUE)
(msq(bx)-msq(X))/sdsq(bx)
})
msq(X)-sdsq(X)* quantile(bootsamplesS,c(0.05,0.95))
msq(X)-sdsq(X)* quantile(bootsamplesSQ,c(0.05,0.95))
msq(X)-sdsq(X)* quantile(bootsamplesSQ,c(0.95,0.05))
?corr
pooled = c(X,Y)
bootRep = replicate(1e4, {
x = sample(pooled , size = length(X), replace = TRUE)
y = sample(pooled , size = length(Y), replace = TRUE)
cor(x,y,method = 'spearman')
})
mean(bootRep>=cor(X,Y))
mean(bootRep>=cor(X,Y, method = 'spearman'))
pooled = c(X,Y)
bootRep = replicate(1e4, {
x = sample(pooled , size = length(X), replace = TRUE)
y = sample(pooled , size = length(Y), replace = TRUE)
abs(cor(x,y,method = 'spearman'))
})
mean(bootRep>= abs(cor(X,Y, method = 'spearman')))
sigma = 0.5
f = function (x)  exp(-abs(x)^3)
rq = function(x) x + rnorm(1, mean = x, sd = sigma)
q = function (x, y) dnorm(y, mean = x, sd = sigma)
MH = function (x, n, q, rq, f){
X = c(x)
for (i in 1:n){
y = rq (x)
rap = f(y)*q(y,x)/(f(x)*q(x,y))
if (runif(1)<= min(rap, 1)) {
X = c(X, x)
x = y
}
}
}
plot(ecdf(MH(0, 2000, q, rq, f)))
plot(ecdf(MH(1, 2000, q, rq, f)))
sigma = 0.5
f = function (x)  exp(-abs(x)^3)
#rq = function(x) x + rnorm(1, mean = x, sd = sigma)
#q = function (x, y) dnorm(y, mean = x, sd = sigma)
MH = function (n, f){
x = 0
X = c(x)
for (i in 1:n){
y = x + rnorm(1, mean = x, sd = sigma)
rap = f(y)/f(x)
if (runif(1)<= min(rap, 1)) {
X = c(X, x)
x = y
}
}
}
plot(ecdf(MH( 2000, f)))
ecdf(MH( 2000, f))
sigma = 0.5
f = function (x)  exp(-abs(x)^3)
#rq = function(x) x + rnorm(1, mean = x, sd = sigma)
#q = function (x, y) dnorm(y, mean = x, sd = sigma)
MH = function (n, f){
x = 0
X = c(x)
for (i in 1:n){
y = x + rnorm(1, mean = x, sd = sigma)
rap = f(y)/f(x)
if (runif(1)<= min(rap, 1)) {
X = c(X, x)
x = y
}
}
return(X)
}
plot(ecdf(MH( 2000, f)))
ecdf(MH( 2000, f))
MH = function (n, f){
x = 0
X = c(x)
for (i in 1:n){
y = x + rnorm(1, mean = x, sd = sigma)
rap = f(y)/f(x)
if (runif(1)<= min(rap, 1)) {
x = y
}
X = c(X, x)
}
return(X)
}
plot(ecdf(MH( 2000, f)))
set.seed(12378190)
f <- function(x) exp(-abs(x)^3)
rwMH <- function(f,n,s){
x=0
X=c()
for (t in 1:n) {
y <- x+rnorm(1,0,s)
if (runif(1)<= min(f(y)/f(x),1)){
x=y
X = c(X,x)
}
}
X
}
X <- rwMH (f,2000,0.5)
plot(ecdf(X))
MH = function (n, f){
x = 0
X = c()
for (i in 1:n){
y = x + rnorm(1, mean = x, sd = sigma)
if (runif(1)<= min(f(y)/f(x), 1)) {
x = y
}
X = c(X, x)
}
return(X)
}
plot(ecdf(MH( 2000, f)))
MH = function (n, f){
x = 0
X = c()
for (i in 1:n){
y = x + rnorm(1, mean = 0, sd = sigma)
if (runif(1)<= min(f(y)/f(x), 1)) {
x = y
}
X = c(X, x)
}
return(X)
}
plot(ecdf(MH( 2000, f)))
f = function (x)  exp(-2*abs(x)^5)
MH = function (n, f, sigma ){
x = 0
X = c()
for (i in 1:n){
y = x + rnorm(1, mean = 0, sd = sigma)
if (runif(1)<= min(f(y)/f(x), 1)) {
x = y
}
X = c(X, x)
}
return(X)
}
X = MH (1e4, f, sigma = 0.5)
mean(X^2)
f = function (x)  exp(-2*abs(x)^5)
MH = function (x, n, f, sigma ){
X = c()
for (i in 1:n){
y = x + rnorm(1, mean = 0, sd = sigma)
if (runif(1)<= min(f(y)/f(x), 1)) {
x = y
}
X = c(X, x)
}
return(X)
}
X = MH (0, 1e4, f, sigma = 0.5)
mean(X^2)
libary(coda)
library(coda)
traceplot(MH (-2, 1e4, f, sigma = 0.5))
plot(MH (-2, 1e4, f, sigma = 0.5))
plot(MH (-2, 1e4, f, sigma = 0.5), type = 'l')
plot(MH (-2, 1e4, f, sigma = 0.5), type = 'l', ylim= c(-3, 3))
lines(MH (-1, 1e4, f, sigma = 0.5), type = 'l', col = 'red')
lines(MH (1, 1e4, f, sigma = 0.5), type = 'l', col = 'blue')
lines(MH (2, 1e4, f, sigma = 0.5), type = 'l', col = 'green')
s1 = 1
s2 = sqrt(2)
ro = 0.8
condGauss = function (x) rnorm(1, mean = s1*ro*x/s2, sd = (1-ro^2)*s1^2)
gibbs = function(n){
x1 = 1
x2 = 2
X = c(x1,x2)
for (i in 1:n){
x1 = condGauss(x2)
x2 = condGauss(x1)
X = rbind(X,c(x1, x2))
}
return (X)
}
X = gibbs (1e4)
plot(X[,1], X[,2])
